pub(crate) use {
    std::{
        borrow::Cow,
        cmp::Ordering::{
            self,
            *,
        },
        collections::{
            HashSet,
            hash_map::{
                self,
                HashMap,
            },
        },
        convert::identity,
        fmt,
        hash::Hash,
        iter,
        mem,
        num::NonZeroU8,
        path::{
            Path,
            PathBuf,
        },
        pin::pin,
        str::FromStr,
        sync::Arc,
    },
    async_trait::async_trait,
    chrono::prelude::*,
    collect_mac::collect,
    either::Either,
    enum_iterator::{
        Sequence,
        all,
    },
    futures::{
        future::{
            self,
            Future,
            FutureExt as _,
        },
        stream::{
            self,
            TryStreamExt as _,
        },
    },
    if_chain::if_chain,
    itertools::Itertools as _,
    lazy_regex::{
        regex_captures,
        regex_is_match,
    },
    log_lock::*,
    once_cell::sync::Lazy,
    ootr_utils::{
        camc::ChestTexture,
        spoiler::{
            HashIcon,
            SpoilerLog,
        },
    },
    racetime::model::RaceData,
    rand::prelude::*,
    rocket::{
        FromForm,
        FromFormField,
        Responder,
        State,
        form::{
            self,
            Context,
            Contextual,
            Form,
        },
        http::Status,
        request::{
            self,
            FromParam,
            FromRequest,
            Request,
        },
        response::{
            Redirect,
            content::RawHtml,
        },
        uri,
    },
    rocket_csrf::CsrfToken,
    rocket_util::{
        ContextualExt as _,
        CsrfForm,
        Origin,
        Suffix,
        ToHtml,
        html,
    },
    serde::{
        Deserialize,
        Deserializer,
        Serialize,
        de::Error as _,
    },
    serde_json::json,
    serde_with::serde_as,
    serenity::{
        all::{
            Context as DiscordCtx,
            MessageBuilder,
        },
        model::prelude::*,
    },
    serenity_utils::{
        RwFuture,
        message::MessageBuilderExt as _,
    },
    sqlx::{
        PgPool,
        Postgres,
        Transaction,
    },
    tokio::{
        io,
        process::Command,
        select,
        sync::mpsc,
        time::{
            Instant,
            sleep_until,
        },
    },
    tokio_util::io::StreamReader,
    typemap_rev::TypeMapKey,
    url::Url,
    uuid::Uuid,
    wheel::{
        fs::{
            self,
            File,
        },
        traits::{
            IoResultExt as _,
            ReqwestResponseExt as _,
        },
    },
    crate::{
        Environment,
        auth,
        cal::{
            self,
            Entrant,
            Entrants,
            Race,
            RaceSchedule,
        },
        config::Config,
        draft::{
            self,
            Draft,
        },
        event::{
            self,
            MatchSource,
            Series,
            TeamConfig,
        },
        favicon::{
            self,
            ChestAppearances,
            ChestTextures,
        },
        http::{
            PageError,
            PageKind,
            PageStyle,
            page,
        },
        lang::Language::{
            self,
            *,
        },
        racetime_bot,
        seed,
        series::*,
        team::{
            self,
            Team,
        },
        user::{
            self,
            User,
        },
        util::*,
    },
};
#[cfg(unix)] pub(crate) use {
    async_proto::Protocol,
    xdg::BaseDirectories,
};
